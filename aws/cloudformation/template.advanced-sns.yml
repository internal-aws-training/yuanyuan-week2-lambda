AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: For aws training - week 2 - Advanced phase
Parameters:
  LambdaFunctionName:
    Description: Lambda Function Name
    Default: yyl-week2-advanced-lambda-function-001
    Type: String
  LambdaPolicyName:
    Description: Policy Name
    Default: yyl-week2-advanced-lambda-policy-001
    Type: String
  LambdaRoleName:
    Description: Lambda Role Name
    Default: yyl-week2-advanced-lambda-role-001
    Type: String
  SNSTopicName:
    Description: SNS Topic Name
    Default: yyl-sns-topic-002
    Type: String

Resources:
  MyLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      #默认Lambda的LogGroup的路径是/aws/lambda/${LambdaFunctionName};
      #如果不指定同样的路径, AWS会自动创建名为/aws/lambda/${LambdaFunctionName}的LogGroup, 但是创建的LogGroup中对log是无期限维护的
      LogGroupName: !Sub /aws/lambda/${LambdaFunctionName}
      RetentionInDays: 7

  MyLambda:
    Type: AWS::Serverless::Function
    DependsOn:
      - MyLambdaLogGroup
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Role: !GetAtt MyLambdaRole.Arn
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ../../output/
      MemorySize: 128
      Timeout: 3     

  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Ref LambdaPolicyName
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
  
  #给SNS授予权限, 让SNS可以调用Lambda Function
  MyLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambda.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Ref SNSTopic
      
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: !Ref SNSTopicName
      TopicName: !Ref SNSTopicName

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: TopicPolicy
        Statement:
          - Sid: allow-s3-to-publish-event
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - SNS:Publish #SNS Action中的‘SNS’必须大写
            Resource: !Ref SNSTopic
          - Sid: allow-lambda-function-to-subscribe
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - SNS:Subscribe
              - SNS:Receive
            Resource: !Ref SNSTopic
      Topics:
        - !Ref SNSTopic
  
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt MyLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SNSTopic

Outputs:
  MyLambda:
    Description: Lambda for practice
    Value: !Ref LambdaFunctionName
  SNSTopic:
    Description: SNS topic for lambda subscription
    Value: !Ref SNSTopicName